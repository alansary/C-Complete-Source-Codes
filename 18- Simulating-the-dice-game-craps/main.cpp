/*
 * main.cpp
 *
 * Created on: 12 Mar 2017
 * Author: Mohamed Amr Alansary
 * Purpose: 
 */

// Fig. 6.10: fig06_10.cpp
// Craps simulation
#include <iostream>
using std::cout;
using std::endl;

#include <cstdlib> // contains prototypes for functions srand and rand
using std::rand; // is used to generate random numbers
using std::srand; // is used to seed the random number generator

#include <ctime> // contains prototypes for function time
using std::time;
// we want to make sure that the psudo-random numbers generated by
// rand change sequence every time we execute the program
// , the best way to do that is by passing to srand a value that
// constantly changes every time you run the program

int rollDice(); // rolls dice, calculates and displays sum

int main() {
	// enumeration with constants that represent the game status
	// enumeration is used to create named constants in C/C++
	// by default the first constant in the list gets the value zero
	// and each subsequent constant gets value one plus the value of
	// the previous constant in the list
	// you can explicitly assign values to the named constants by providing
	// an equal sign then the value
	// enum Status {CONTINUE = 1, WON = 100, LOST = 200}
	// you can now declare variable of the new type, and the values
	// of the constants will still the same as in the definition
	enum Status {CONTINUE, WON, LOST};

	int myPoint; // point if no win or loss on first roll
	Status gameStatus; // can contain CONTINUE, WON or LOST

	// randomize random number generator using current time
	// srand argument is an unsigned int value
	// time gives us the time of the day
	srand( time( 0 ) );
	// each time we run the program, we get a different value for the
	// time of the day and therefore a different srand and hence a
	// different sequence of random numbers
	// the argument 0 passed to the time function basically says that
	// we don't intend to store the time in a variable in memory, this
	// is actually a pointer argument, we can provide a pointer and
	// the value of the time will be placed in that variable, in this case
	// we just want to use its return value

	int sumOfDice = rollDice(); // first roll of the dice

	// determine game status and point (if needed) based on first roll
	switch (sumOfDice) {
		case 7: // win with 7 on first roll
		case 11: // win with 11 on first roll
			gameStatus = WON;
			break;
		case 2: // lose with 2 on first roll
		case 3: // lose with 3 on first roll
		case 12: // lose with 12 on first roll
			gameStatus = LOST;
			break;
		default: // did not win or lose, so remember point
			gameStatus = CONTINUE; // game is not over
			myPoint = sumOfDice; // remember the point
			cout << "Point is " << myPoint << endl;
			break; // optional at end of switch
	}	 // end switch

	// while game is not complete
	while (gameStatus == CONTINUE) { // not WON or LOST
		sumOfDice = rollDice(); // roll dice again

		// determine game status
		if (sumOfDice == myPoint) // win by making point
			gameStatus = WON;
		else
			if (sumOfDice == 7) // lose by rolling 7 before point
				gameStatus = LOST;
	} // end while

	// display won or lost message
	if (gameStatus == WON)
		cout << "Player wins" << endl;
	else
		cout << "Player loses" << endl;

	return 0; // indicate successful termination
} // end main

// roll dice, calculate sum and display resuls
int rollDice() {
	// pick random die values
	int die1 = 1 + rand() % 6; // first die roll
	int die2 = 1 + rand() % 6; // second die roll
	int sum = die1 + die2; // computer sum of die values
	// display result of this roll
	cout << "Player rolled " << die1 << " + " << die2
		<< " = " << sum << endl;
	return sum; // return sum of dice
} // end function rollDice
